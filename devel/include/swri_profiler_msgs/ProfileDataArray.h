// Generated by gencpp from file swri_profiler_msgs/ProfileDataArray.msg
// DO NOT EDIT!


#ifndef SWRI_PROFILER_MSGS_MESSAGE_PROFILEDATAARRAY_H
#define SWRI_PROFILER_MSGS_MESSAGE_PROFILEDATAARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <swri_profiler_msgs/ProfileData.h>

namespace swri_profiler_msgs
{
template <class ContainerAllocator>
struct ProfileDataArray_
{
  typedef ProfileDataArray_<ContainerAllocator> Type;

  ProfileDataArray_()
    : header()
    , rostime_stamp()
    , data()  {
    }
  ProfileDataArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rostime_stamp()
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _rostime_stamp_type;
  _rostime_stamp_type rostime_stamp;

   typedef std::vector< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> >::other >  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> const> ConstPtr;

}; // struct ProfileDataArray_

typedef ::swri_profiler_msgs::ProfileDataArray_<std::allocator<void> > ProfileDataArray;

typedef boost::shared_ptr< ::swri_profiler_msgs::ProfileDataArray > ProfileDataArrayPtr;
typedef boost::shared_ptr< ::swri_profiler_msgs::ProfileDataArray const> ProfileDataArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace swri_profiler_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'swri_profiler_msgs': ['/home/sebastian/catkin_ws/src/swri_profiler/swri_profiler_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f57632c452d563519410097bdf9c1f0";
  }

  static const char* value(const ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f57632c452d5635ULL;
  static const uint64_t static_value2 = 0x19410097bdf9c1f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swri_profiler_msgs/ProfileDataArray";
  }

  static const char* value(const ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
# The header contains the node's name in the frame id and the wall\n\
# time in the stamp.\n\
\n\
time rostime_stamp\n\
# rostime_stamp contains the current ros::Time::now() to make it easier to\n\
# compare data between different runs driven by the same recorded bag\n\
# data.\n\
\n\
ProfileData[] data\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: swri_profiler_msgs/ProfileData\n\
uint32 key\n\
# The corresponding key for this block reported in the profiler's index.\n\
\n\
uint64 abs_call_count\n\
# The number of times this block has been started since the profiler\n\
# started.\n\
\n\
duration abs_total_duration\n\
# The total amount of time spent in this block since the profiler\n\
# started, including any current calls.\n\
\n\
duration rel_total_duration\n\
# The amount of time spent in this block since the previous report.\n\
\n\
duration rel_max_duration\n\
# The maximum amount of time spent in this call since the last report.\n\
\n\
";
  }

  static const char* value(const ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rostime_stamp);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProfileDataArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swri_profiler_msgs::ProfileDataArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rostime_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.rostime_stamp);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWRI_PROFILER_MSGS_MESSAGE_PROFILEDATAARRAY_H
