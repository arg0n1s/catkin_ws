// Generated by gencpp from file swri_profiler_msgs/ProfileData.msg
// DO NOT EDIT!


#ifndef SWRI_PROFILER_MSGS_MESSAGE_PROFILEDATA_H
#define SWRI_PROFILER_MSGS_MESSAGE_PROFILEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace swri_profiler_msgs
{
template <class ContainerAllocator>
struct ProfileData_
{
  typedef ProfileData_<ContainerAllocator> Type;

  ProfileData_()
    : key(0)
    , abs_call_count(0)
    , abs_total_duration()
    , rel_total_duration()
    , rel_max_duration()  {
    }
  ProfileData_(const ContainerAllocator& _alloc)
    : key(0)
    , abs_call_count(0)
    , abs_total_duration()
    , rel_total_duration()
    , rel_max_duration()  {
  (void)_alloc;
    }



   typedef uint32_t _key_type;
  _key_type key;

   typedef uint64_t _abs_call_count_type;
  _abs_call_count_type abs_call_count;

   typedef ros::Duration _abs_total_duration_type;
  _abs_total_duration_type abs_total_duration;

   typedef ros::Duration _rel_total_duration_type;
  _rel_total_duration_type rel_total_duration;

   typedef ros::Duration _rel_max_duration_type;
  _rel_max_duration_type rel_max_duration;




  typedef boost::shared_ptr< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> const> ConstPtr;

}; // struct ProfileData_

typedef ::swri_profiler_msgs::ProfileData_<std::allocator<void> > ProfileData;

typedef boost::shared_ptr< ::swri_profiler_msgs::ProfileData > ProfileDataPtr;
typedef boost::shared_ptr< ::swri_profiler_msgs::ProfileData const> ProfileDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swri_profiler_msgs::ProfileData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace swri_profiler_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'swri_profiler_msgs': ['/home/sebastian/catkin_ws/src/swri_profiler_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac3df4df3591ee6f49805a9d35e9d86c";
  }

  static const char* value(const ::swri_profiler_msgs::ProfileData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac3df4df3591ee6fULL;
  static const uint64_t static_value2 = 0x49805a9d35e9d86cULL;
};

template<class ContainerAllocator>
struct DataType< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swri_profiler_msgs/ProfileData";
  }

  static const char* value(const ::swri_profiler_msgs::ProfileData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 key\n\
# The corresponding key for this block reported in the profiler's index.\n\
\n\
uint64 abs_call_count\n\
# The number of times this block has been started since the profiler\n\
# started.\n\
\n\
duration abs_total_duration\n\
# The total amount of time spent in this block since the profiler\n\
# started, including any current calls.\n\
\n\
duration rel_total_duration\n\
# The amount of time spent in this block since the previous report.\n\
\n\
duration rel_max_duration\n\
# The maximum amount of time spent in this call since the last report.\n\
\n\
";
  }

  static const char* value(const ::swri_profiler_msgs::ProfileData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.key);
      stream.next(m.abs_call_count);
      stream.next(m.abs_total_duration);
      stream.next(m.rel_total_duration);
      stream.next(m.rel_max_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProfileData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swri_profiler_msgs::ProfileData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swri_profiler_msgs::ProfileData_<ContainerAllocator>& v)
  {
    s << indent << "key: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.key);
    s << indent << "abs_call_count: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.abs_call_count);
    s << indent << "abs_total_duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.abs_total_duration);
    s << indent << "rel_total_duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.rel_total_duration);
    s << indent << "rel_max_duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.rel_max_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWRI_PROFILER_MSGS_MESSAGE_PROFILEDATA_H
