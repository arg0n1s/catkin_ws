# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from swri_profiler_msgs/ProfileDataArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import swri_profiler_msgs.msg
import genpy
import std_msgs.msg

class ProfileDataArray(genpy.Message):
  _md5sum = "0f57632c452d563519410097bdf9c1f0"
  _type = "swri_profiler_msgs/ProfileDataArray"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
# The header contains the node's name in the frame id and the wall
# time in the stamp.

time rostime_stamp
# rostime_stamp contains the current ros::Time::now() to make it easier to
# compare data between different runs driven by the same recorded bag
# data.

ProfileData[] data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: swri_profiler_msgs/ProfileData
uint32 key
# The corresponding key for this block reported in the profiler's index.

uint64 abs_call_count
# The number of times this block has been started since the profiler
# started.

duration abs_total_duration
# The total amount of time spent in this block since the profiler
# started, including any current calls.

duration rel_total_duration
# The amount of time spent in this block since the previous report.

duration rel_max_duration
# The maximum amount of time spent in this call since the last report.

"""
  __slots__ = ['header','rostime_stamp','data']
  _slot_types = ['std_msgs/Header','time','swri_profiler_msgs/ProfileData[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,rostime_stamp,data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ProfileDataArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rostime_stamp is None:
        self.rostime_stamp = genpy.Time()
      if self.data is None:
        self.data = []
    else:
      self.header = std_msgs.msg.Header()
      self.rostime_stamp = genpy.Time()
      self.data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.rostime_stamp.secs, _x.rostime_stamp.nsecs))
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.data:
        _x = val1
        buff.write(_struct_IQ.pack(_x.key, _x.abs_call_count))
        _v1 = val1.abs_total_duration
        _x = _v1
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v2 = val1.rel_total_duration
        _x = _v2
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v3 = val1.rel_max_duration
        _x = _v3
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rostime_stamp is None:
        self.rostime_stamp = genpy.Time()
      if self.data is None:
        self.data = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.rostime_stamp.secs, _x.rostime_stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data = []
      for i in range(0, length):
        val1 = swri_profiler_msgs.msg.ProfileData()
        _x = val1
        start = end
        end += 12
        (_x.key, _x.abs_call_count,) = _struct_IQ.unpack(str[start:end])
        _v4 = val1.abs_total_duration
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        _v5 = val1.rel_total_duration
        _x = _v5
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        _v6 = val1.rel_max_duration
        _x = _v6
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.data.append(val1)
      self.rostime_stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.rostime_stamp.secs, _x.rostime_stamp.nsecs))
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.data:
        _x = val1
        buff.write(_struct_IQ.pack(_x.key, _x.abs_call_count))
        _v7 = val1.abs_total_duration
        _x = _v7
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v8 = val1.rel_total_duration
        _x = _v8
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v9 = val1.rel_max_duration
        _x = _v9
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rostime_stamp is None:
        self.rostime_stamp = genpy.Time()
      if self.data is None:
        self.data = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.rostime_stamp.secs, _x.rostime_stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data = []
      for i in range(0, length):
        val1 = swri_profiler_msgs.msg.ProfileData()
        _x = val1
        start = end
        end += 12
        (_x.key, _x.abs_call_count,) = _struct_IQ.unpack(str[start:end])
        _v10 = val1.abs_total_duration
        _x = _v10
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        _v11 = val1.rel_total_duration
        _x = _v11
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        _v12 = val1.rel_max_duration
        _x = _v12
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.data.append(val1)
      self.rostime_stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_IQ = struct.Struct("<IQ")
_struct_3I = struct.Struct("<3I")
_struct_2I = struct.Struct("<2I")
_struct_2i = struct.Struct("<2i")
