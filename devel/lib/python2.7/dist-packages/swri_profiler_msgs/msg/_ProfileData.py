# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from swri_profiler_msgs/ProfileData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class ProfileData(genpy.Message):
  _md5sum = "ac3df4df3591ee6f49805a9d35e9d86c"
  _type = "swri_profiler_msgs/ProfileData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 key
# The corresponding key for this block reported in the profiler's index.

uint64 abs_call_count
# The number of times this block has been started since the profiler
# started.

duration abs_total_duration
# The total amount of time spent in this block since the profiler
# started, including any current calls.

duration rel_total_duration
# The amount of time spent in this block since the previous report.

duration rel_max_duration
# The maximum amount of time spent in this call since the last report.

"""
  __slots__ = ['key','abs_call_count','abs_total_duration','rel_total_duration','rel_max_duration']
  _slot_types = ['uint32','uint64','duration','duration','duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       key,abs_call_count,abs_total_duration,rel_total_duration,rel_max_duration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ProfileData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.key is None:
        self.key = 0
      if self.abs_call_count is None:
        self.abs_call_count = 0
      if self.abs_total_duration is None:
        self.abs_total_duration = genpy.Duration()
      if self.rel_total_duration is None:
        self.rel_total_duration = genpy.Duration()
      if self.rel_max_duration is None:
        self.rel_max_duration = genpy.Duration()
    else:
      self.key = 0
      self.abs_call_count = 0
      self.abs_total_duration = genpy.Duration()
      self.rel_total_duration = genpy.Duration()
      self.rel_max_duration = genpy.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_IQ6i.pack(_x.key, _x.abs_call_count, _x.abs_total_duration.secs, _x.abs_total_duration.nsecs, _x.rel_total_duration.secs, _x.rel_total_duration.nsecs, _x.rel_max_duration.secs, _x.rel_max_duration.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.abs_total_duration is None:
        self.abs_total_duration = genpy.Duration()
      if self.rel_total_duration is None:
        self.rel_total_duration = genpy.Duration()
      if self.rel_max_duration is None:
        self.rel_max_duration = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.key, _x.abs_call_count, _x.abs_total_duration.secs, _x.abs_total_duration.nsecs, _x.rel_total_duration.secs, _x.rel_total_duration.nsecs, _x.rel_max_duration.secs, _x.rel_max_duration.nsecs,) = _struct_IQ6i.unpack(str[start:end])
      self.abs_total_duration.canon()
      self.rel_total_duration.canon()
      self.rel_max_duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_IQ6i.pack(_x.key, _x.abs_call_count, _x.abs_total_duration.secs, _x.abs_total_duration.nsecs, _x.rel_total_duration.secs, _x.rel_total_duration.nsecs, _x.rel_max_duration.secs, _x.rel_max_duration.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.abs_total_duration is None:
        self.abs_total_duration = genpy.Duration()
      if self.rel_total_duration is None:
        self.rel_total_duration = genpy.Duration()
      if self.rel_max_duration is None:
        self.rel_max_duration = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.key, _x.abs_call_count, _x.abs_total_duration.secs, _x.abs_total_duration.nsecs, _x.rel_total_duration.secs, _x.rel_total_duration.nsecs, _x.rel_max_duration.secs, _x.rel_max_duration.nsecs,) = _struct_IQ6i.unpack(str[start:end])
      self.abs_total_duration.canon()
      self.rel_total_duration.canon()
      self.rel_max_duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_IQ6i = struct.Struct("<IQ6i")
